package org.apache.solr;


import org.apache.lucene.util.TestUtil;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrRequest;
import org.apache.solr.client.solrj.SolrServerException;
import org.apache.solr.client.solrj.impl.CloudSolrClient;
import org.apache.solr.client.solrj.impl.HttpSolrClient;
import org.apache.solr.client.solrj.request.QueryRequest;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.params.ModifiableSolrParams;
import org.apache.solr.common.util.SimpleOrderedMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.lang.invoke.MethodHandles;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class QuerySolr {

    private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());
    private static Random r = new Random();
    ModifiableSolrParams queryDefaults = null;

    public static void main(String args[]) throws IOException, SolrServerException, InterruptedException {

        HttpSolrClient httpSolrClient = new HttpSolrClient.Builder().withBaseSolrUrl("http://solr.enetdefender.com/solr/catalog.catalog02").build();

        new CloudSolrClient.Builder().withZkHost("").build();

        String json_facets = "{ProductType: {type:terms,field:ProductType,limit:5}}";

        SolrQuery query = new SolrQuery();
        query.setQuery("*:*");
        query.set("json.facet",json_facets);
        query.set("useFieldCache",true);
        //query.set("sfield","b4_location_geo_si");
        //query.set("pt","47.36667,8.55");
        //query.setSort( "geodist()", SolrQuery.ORDER.asc);

        SolrRequest request = new QueryRequest(query);

        //SolrRequest request = new QueryRequest(ModifiableSolrParams.toSolrParams(query.toNamedList()));

        List<String> productTypeFacets = new ArrayList<>();

        QueryResponse response = new QueryResponse(httpSolrClient.request(request), httpSolrClient);
        SimpleOrderedMap facets = (SimpleOrderedMap) response.getResponse().get("facets");
        if (facets != null && facets.size() > 0) {
            SimpleOrderedMap productType = (SimpleOrderedMap) facets.get("ProductType"); //fieldName
            if (productType != null && productType.size() > 0) {
                List<SimpleOrderedMap> buckets = (List) productType.get("buckets");
                if (buckets != null && buckets.size() > 0) {
                    for (SimpleOrderedMap bucket : buckets) {
                        productTypeFacets.add(bucket.get("val").toString());
                    }
                }
            }
        }

        System.out.println("productTypeFacets: " + productTypeFacets);


        /*String json_query =
                "{random_s:{type:terms,field:random_s,sort:'count asc',limit:-1,overrequest:0,refine:true}}";

        QueryResponse response = client.query(new ModifiableSolrParams().add("q", "*:*").
                        add("json.facet", json_query).
                        add("_facet_", "{refine:{random_s:{_l:[B]}}}}").
                        add("debug", "true").
                        add("wt", "json").
                        add("shards", "" +
                                "http://localhost:8983/solr/collection1_shard1_replica_n1,http://localhost:8983/solr/collection1_shard2_replica_n1" +
                                "").
                        add("isShard", "true")
                //add("shard.url","http://127.0.0.1:8983/solr/collection1_shard2_0_replica_n1/")
        );

        QueryResponse response1 = client.query(new ModifiableSolrParams().add("q", "*:*").
                        add("json.facet", json_query).
                        add("_facet_", "{refine:{random_s:{_l:[B]}}}}").
                        add("debug", "true").
                        add("wt", "json").
                        add("shards", "" +
                                "http://localhost:8983/solr/collection1_shard1_replica_n1,http://localhost:8983/solr/collection1_shard2_replica_n1" +
                                "").
                        add("isShard", "true")
                //add("shard.url","http://127.0.0.1:8983/solr/collection1_shard2_0_replica_n1/")
        );*/


        //SolrParams params = new ModifiableSolrParams().add("q","*:*").add("fq","{!terms f=id}(CH2503101C,FO2502107,MA2502125N,FO2502118C,CH2801157,CH2800126,FO1320174,GM1321191,ALY70804U77N,CH2519104,FO1320158,CH1320203,TO2503162N,ALY05431U86N,SU2503111,STL70729U45AN,NI2502161C,VO2502122N,FO1200141PP,GM1320227,FO2502219N,HO1320138,GM2503213C,FO1321206,CH2502177N,GM2556101,FO2503140,HO2503121C,STL02142U45N,CH1320168,NI2819113,TO2520161,STL08096U20N,GM2502196,FO2502173,NI2503114,FO1321204,CH1200177PP,NI2503184N,GM1321147,STL70696U45N,FO2800113,CH2503177N,GM1200392PP,CH1321121,CH2593104,GM1321295,TO1321206,ALY04025U78N,GM1320238,TO2502107C,FO1321169,GM2590104N,TO1106169C,ALY02076U55N,GM1320168,FO2502104,MA2518143N,CH1320179,ALY65288U78N,TO2502140C,GM2502160,TO2502118,VW2503112,FO1321157,CH1321202,STL03543U45N,FO1106346C,NI2503207N,GM2502156,SU1200143PP,GM2550143,HO2503127N,CH1321132,MI2502158N,FO2503174,VW1320110,HO1006163C,FO2800149,CH2502114,TO1321112,VO2502102,FO2800112,GM2502183,GM1321156,NI2502130N,ALY09038U20N,FO1200337PP,CH2519102,FO1320182,FO1321158,GM1320208,NI2800156,ALY05433U20N,FO1321168,ALY69565U20N,GM2518140,SZ1320101,HO2502111,FO2503160,STL03670U45N,GM2502356N,HO1321138,NI2503193N,FO1321156,STL68700U45N,HO1321101,TO2503134N,HO2518105,ALY03589U35N,GM2502282N,NI1320134,FO1320195,GM2503196,FO1321144,HO1321136,ALY05087U10N,NI2503171N,GM2593113,CH2503222N,FO2502200C,FO1320193,NI1200163PP,GM2503201,HO2801134,GM1320153,FO1320138,ALY03781U10N,FO2801113,ALY68738U15N,TO1320160,GM2503282N,FO1321132,KI2503143N,CH2502101,CH1320189,NI2592103,FO1320165,TO2502128,ALY63995U35N,HY2502128,CH2592135,NI2502104,GM2503154N,FO2503200C,GM1321168,FO2503104,GM1320137,NI1321110,CH2800121,CH1321179,STL69505U45N,STL64891U45N,FO1200172PP,SU2502102,ALY03554U20N,CH2502131N,NI1200115PP,FO2502137,STL05195U20N,ALY69397U78N,NI2502156,CH1321177,GM2592118,ALY69897U20N,MA2503134N,ALY05296U10N,HY1200156PP,ALY07044U10N,CH2502112,FO2801119N,ALY63903U30N,ALY03595U20N,STL62471U45N,GM1321154,FO1321178,GM1321212,GM2502309N,HO1321123,TO2800124,ALY03646U10N,FO2502176,GM2502136,HO2503107,CH1320198,ALY70727A20N,CH2503122C,FO1321166,FO2502139C,HO1321111,CH2800125N,FO2593112,GM2801150,TO2502132N,GM1321177,GM1321235,ALY09055U10N,CH2503109,FO2521147,FO2503139C,HO2503143N,NI2503157,GM2502172C,FO1321152,STL03036U20N,STL03340U20N,FO2800156,MI2502124,FO2800127N,FO2502199C,GM2503335N,SU2818102N,FO2592184,ALY05215U80N,HO1321122,CH2503107,VW2502146N,STL00806U85N,NI1321120,CH2590108,NI2593103,FO1200306PP,FO1321165,ALY69471U77N,FO2801127N,HO2518108,ALY65432U20N,TO2502129C,FO2521111,STL62499U45N,FO1320122,GM2592128,FO1321108,FO2503137,MA2503119,MI2502139N,VW2502112,FO1320157,HO1320102,GM1321232,GM1320117,GM1321119,GM2503202C,CH1321122,FO1320190,CH2800142,GM1321273,FO2800155,FO2503169C,MC2502105N,CH1321163,FO2541106,CH2801128,CH1320132,STL69542U45N,CH1321110,FO2502151C,HO2502114C,GM1320156,HY2503163N,GM2503350N,HO1320125,FO2503107,GM1200140PP,STL08069U20N,CH2518102,GM2503134,GM1321175,MC2503105N,ALY02325U10N,FO1321199,MA2519143N,FO2503111,FO1320168,FO1200320PP,GM1321243,HY2502123,FO2502160,FO2592114,NI1320140,CH2800122C,ALY68748U16N,MA2502126,CH1321174,FO1320214,HO1320101,TO2521159,ALY63985U10N,VW1320107,ALY05409U85N,TO1321164,ALY02187B80N,FO1200374PP,TO2502121C,CH1320170,CH2503105,FO2593184,HO1320136,STL05125U15N,CH1320115,GM2592113,SU2502133N,STL62480U45N,FO2800154N,CH2502115,GM2503203,FO1320179,GM2592138,FO1320132,HO1320124,HY2502134,TO2503136,CH2502232N,ALY69508U20N,VO1320101,NI2502127N,CH2800111,FO2800117C,GM1321242,TO2520139,BM2518118N,GM2503158,STL69723U45N,IN2503137N,ALY63992U35N,FO2592193,GM1321230,GM1321117,CH2503232N,FO2801114,GM1321127,CH2502122C,GM2882102,FO1320201,CH1321171,FO1321129,GM1200139PP,TO2503140C,ALY69348U30N,CH1321196,GM1320154,HO2503113,NI1320117,FO1320178,HY2503157N,HO1320123,FO2503131,TO1321106,STL69313U45N,FO1321172,FO2800106,GM2502175C,GM2503101C,GM2593141,NI2503152N,HO2502107,GM1320189,GM1320247,FO1320166,STL62397U45N,STL03104U45N,MI2503158N,ALY03674U20N,FO1321160,ALY69474U30N,ALY69554U20N,FO2592112,FO2593114,CH1321102,FO1321115,GM1320177,MA2503126,FO1200362PP,STL69494U45N,HO2519105,GM1321171,KI2501100N,FO1321195,GM1200343PP,TO1320168,STL69405U20N,GM1200325PP,FO1321103,TO1320131,CH2502109,FO2520147,ALY69444U20N,NI2801103,GM2801124,CH1321170,TO2503146,FO1320152,GM2503309N,GM1321114,NI2502183N,GM2502139C,FO1321138,STL03404U20N,TO1321160,CH1320164,GM1320211,MB2502163N,HO1320122,NI2503147,HO1321124,GM2502187C,GM1321139,HY2503134,TO2503205N,CH2801125N,FO1321200,CH2502168N,GM1320188,FO2502199N,CH1320199,CH2801111,FO1200150PP,ALY98552U20,STL07001U45N,TO1321103,CH2801121,CH1320204,GM2503139C,ALY06598U10N,TO1321144,GM1200113PP,VW2819103,GM2503187C,FO1321194,FO2502177N,MB2503108N,CH1320150,FO1320108,CH2503104C,GM2502202N,GM2503172C,FO1321102,NI2503117,FO1223119PP,HY2503158N,NI1320127,GM1200346PP,GM1320174,CH2502101C,GM1320232,NI2818112C,HO2502117,CH1321124,MA2503135N,FO2540106,CH2801122,CH1321149,FO1320244,CH2503131N,NI2503205N,CH1200178PP,CH1320110,GM1321148,GM1321206,GM2503177,MI1320123,GM2502213C,ALY05308U85N,ALY02201U20N,GM2502154C,CH1321159,STL63827U45N,TO2503112C,GM1321247,ALY02267A10N,GM1321152,FO1200317PP,FO1321113,VO2503125N,ALY63928U20N,HO2502103,FO1320199,GM1320185,TO1321127,FO1320162,CH2818101C,TO2503213N,ALY03638U20N,TO1321131,CH1320174,STL65727U45N,GM1320173,CH1320184,TO2520159,GM2502354N,CH1320121,TO2502158C,GM2503188,ALY03788U80N,TO1320164,GM1321217,STL03518U20N,NI2801136,NI2521113,TO2503117C,ALY02212U10N,CH2502105,HO2503114C,VW1320111,ALY70727U20N,GM1200234PP,GM1320106,FO2801105,ALY03581U10N,CH2519131N,GM2502203,GM1320186,CH2800125,FO2503108,STL63733U45N,ALY69348A30N,CH1320144,SU2502132N,CH1321204,STL03621A20N,CH1200192PP,FO2503199C,GM2503174,FO1321122,CH2502180N,SU2819102N,HO2502111N,FO1320161,GM1321244,MA2502140N,FO1321163,VW2503146N,GM1321123,CH1321134,NI2818113C,GM2503257,GM2502221C,FO2502145,ALY03554A30N,TO2503136C,NI1200190PP,HO2518106,FO2503114C,VW2502143N,GM1320230,FO1320196,HO1320141,FO2800114,TO1200124PP,TO2503121C,FO1321190,GM1320127,TO1321165,VW2503124N,CH2502120,CH2503180N,CH1320171,NI1321125,TO2503141,CH1321157,NI2502192N,CH1321215,ALY69463U10N,ALY02399U20N,HO1006156C,TO2503107C,FO1320172,MI2502105,CH1200181PP,FO1223114PP,ALY69516U10N,CH2592113N,CH1321203,HO2503103,TO2503141N,GM1321185,ALY09055U30N,GM2503101N,GM1320138,FO1200370PP,ALY03546A80N,ALY69440U20N,ALY02071U20N,FO2503151C,CH2503121C,GM1320171,CH1320182,FO2502122C,GM1321173,CH1321184,FO1200173PP,ALY05306U10N,CH1321168,GM1320126,FO1320103,ALY05308U20N,NI2800103,FO2503173,GM2800124,FO2502200,GM2503355N,VW1321111,LX2502132N,CH2503115,ALY62500U20N,GM1320114,GM2503145,FO2503219N,CH2801122C,FO2503169,FO2503122C,GM1320252,ALY63893U10N,TO2818127N,FO2502130,NI1320110,GM1321238,GM1320149,FO1321128,GM1321201,GM2502101C,HO2502110,ALY05295U10N,LX2503132N,CH2592143N,FO1321161,GM1320192,FO1200184PP,ALY09069U20N,FO1321171,ALY05358U85N,HO2518104,GM1320170,TO2819127N,ALY03507U20N,NI1320133,VW2818103,TO1006183N,FO1321196,ALY02362U20N,FO2502168C,TO2502112C,FO1321201,VW1321110,FO2801117C,STL69602U45N,FO2502176N,FO2801149,GM1321170,TO2520154,CH1320124,FO1320137,GM1321115,VO2503102,HY2502161N,FO2801112,GM2503183,TO2800140,CH2502222N,ALY03797U10N,CH2800122,FO1320180,CH1320159,ALY58780U20N,GM1321208,TO1006186C,TO2521154,SZ1321101,CH2800157,HO2503111,ALY05254U80N,GM1321251,AU2502128N,CH1320205,GM1321138,FO1320113,GM2502335N,CH1321141,TO1320127,STL03336U20N,GM1321126,FO1320206,TO1320178,FO2502140,TO1320115,STL02215U20N,NI2818113,TO1006201C,GM2502188,GM1320217,AU2503128N,GM1321153,CH1321164,GM1320122,NI2800136,NI2520113,FO1320204,NI2502114,HY2801125,CH2502107,MA2519127N,TO1321115,GM1320147,TO2503144,GM1321149,FO1320124,MA1320106,TO2521153,HY2503128,CH2592104,STL62473U45N,NI1320114,GM1321192,CH2503128N,ALY09097U10N,GM1321250,TO1320206,FO2502169C,NI1320139,NI2503127C,SU2503102,ALY68738U20N,HO2519104,FO2503153,MA1321106,NI1321133,GM1320244,GM2800104,VW2503130N,CH2503124,STL63773U45N,GM1320123,GM1320228,FO2502106,CH1320134,GM2502257,ALY69566U10N,CH2800147C,ALY07047U10N,FO2503199N,ALY03375U80N,CH1320202,GM2884102,FO2502147C,FO1320110,GM2502350N,CH2592127,FO1200353PP,ALY09074U20N,CH2503112,CH1320122,FO2801159C,FO2801110,GM1321218,FO1321137,TO1320165,TO2801140,TO2520107,HO2503117C,FO2503177N,GM2800127,GM2503136,TO1320112,TO2502141,CH1320157,FO1321180,CH2801147C,CH1320215,HO1321117,FO2503147C)");

        //SolrParams params = new ModifiableSolrParams().add("q","*:*").add("fq","");

        //HttpSolrClient httpClient = new HttpSolrClient.Builder("http://127.0.0.1:8983/solr/collection1").build();
        //SolrQuery query = new SolrQuery().setQuery("*:*").setRows(1000);



        /*while(true) {
            QueryResponse response = client.query(new ModifiableSolrParams().add("q", "cricket_s:" + createSentance(3)));
            System.out.println(response);
            client.commit();
            Thread.sleep(2000);
        }*/

        //httpClient.request()

        //httpClient.qu

        //httpSolrClient.query(params);
        //client.query(params);

        //System.out.println(response);
        //client.query(new ModifiableSolrParams().add("q","*:*").add("sort","external_version_field_s desc"));

        /*while (true) {
            client.query(new ModifiableSolrParams().add("q","*:*").add("sort","external_version_field_s desc"));
            client.query(new ModifiableSolrParams().add("q","*:*").add("sort","external_version_field_s asc"));
            client.query(new ModifiableSolrParams().add("q",createSentance(3)).add("sort","external_version_field_s desc"));
        }*/
    }

    private static String createSentance(int numWords) {
        //Sentence with numWords and 3-7 letters in each word
        StringBuilder sb = new StringBuilder(numWords * 5);
        for (int i = 0; i < numWords; i++) {
            sb.append(TestUtil.randomSimpleString(r, 3, 7) + " ");
        }
        return sb.toString();
    }

    public ModifiableSolrParams queryDefaults() {
        if (queryDefaults == null) {
            queryDefaults = new ModifiableSolrParams();
        }
        return queryDefaults;
    }
}
